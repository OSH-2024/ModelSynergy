{"version":3,"file":"static/js/591.1d553c0f.chunk.js","mappings":"+RAQA,MAAMA,GAAYC,EAAAA,EAAAA,IAAYC,IAAK,CACjCC,KAAM,CACJC,QAASF,EAAMG,QAAQ,GACvBC,MAAO,QAETC,MAAO,CACLC,UAAWN,EAAMG,QAAQ,GACzBD,QAASF,EAAMG,QAAQ,IAEzBI,SAAU,CACRL,QAASF,EAAMG,QAAQ,GACvBG,UAAWN,EAAMG,QAAQ,IAE3BK,OAAQ,CACNC,OAAQT,EAAMG,QAAQ,QA2G1B,EAvGkB,KAChB,MAAMO,EAAUZ,KACV,IAAEa,EAAG,GAAEC,EAAE,IAAEC,IAAQC,EAAAA,EAAAA,OAKlBC,EAAQC,IAAaC,EAAAA,EAAAA,aACrBC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,UAC/BG,GAAeC,EAAAA,EAAAA,cACnB,ICRoB,EAACT,EAAYC,EAAaS,IACzCC,IAAAA,IAAkB,cAAe,CACtCC,OAAQ,CACNZ,KACAC,MACAS,aDIAG,CAASb,EAAIC,EAAKK,GACfQ,MAAMC,IACDA,EAAIC,KAAKb,OACXC,EAAUW,EAAIC,KAAKA,KAAKC,QAExBb,EAAUW,EAAIC,KAAKE,IACrB,IAEDC,OAAOC,GAAQhB,EAAUgB,EAAIC,eAClC,CAACrB,EAAIC,EAAKK,IAoCZ,OAjCAgB,EAAAA,EAAAA,YAAU,KACR,OAAQvB,GACN,IAAK,SCzCc,EAACC,EAAYC,IAC7BU,IAAAA,IAAkB,eAAgB,CACvCC,OAAQ,CACNZ,KACAC,SDsCEsB,CAAUvB,EAAIC,GACXa,MAAMC,IACDA,EAAIC,KAAKb,OACXC,EAAUW,EAAIC,KAAKA,KAAKC,QAExBb,EAAUW,EAAIC,KAAKE,IACrB,IAEDC,OAAOC,GAAQhB,EAAUgB,EAAIC,cAChC,MACF,IAAK,OC3CY,EAACrB,EAAYC,IAC3BU,IAAAA,IAAkB,aAAc,CACrCC,OAAQ,CACNZ,KACAC,SDwCEuB,CAAQxB,EAAIC,GACTa,MAAMC,IACDA,EAAIC,KAAKb,OACXC,EAAUW,EAAIC,KAAKA,KAAKC,QAExBb,EAAUW,EAAIC,KAAKE,IACrB,IAEDC,OAAOC,GAAQhB,EAAUgB,EAAIC,cAChC,MACF,IAAK,QACHb,IACA,MACF,QACEJ,EAAU,WAAD,OAAYL,EAAG,uBAClB,GAET,CAACA,EAAKS,EAAcR,EAAIC,KAGzB,iBAAKwB,UAAW3B,EAAQT,KAAK,WAC3B,SAACqC,EAAA,EAAS,CAACC,MAAO5B,EAAI,SACX,UAARA,IACC,SAAC6B,EAAA,EAAG,CAACH,UAAW3B,EAAQH,SAAS,UAC/B,UAACkC,EAAA,GAAI,CAACC,WAAS,EAACvC,QAAS,EAAE,WACzB,SAACsC,EAAA,GAAI,CAACE,MAAI,YACR,SAACC,EAAA,EAAM,CACLC,MAAO3B,EACP4B,SAAWC,GAAM5B,EAAU4B,EAAEC,OAAOH,OAAiB,SAEpD,CACC,QACA,WACA,KACA,aACA,iBACA,QACA,gBACA,QACA,gBACA,SACA,UACA,oBACAI,KAAKF,IACL,SAACG,EAAA,EAAQ,CAACL,MAAOE,EAAE,SAAEA,WAI3B,SAACN,EAAA,GAAI,CAACE,MAAI,YACR,SAACQ,EAAA,EAAM,CAACC,QAAShC,EAAa,+BAMxC,SAACkB,EAAA,EAAS,CAACC,MAAK,cAAS3B,EAAE,mBAAWC,GAAM,UAC1C,SAACwC,EAAA,EAAc,CACbC,QAASvC,GAAU,UACnBwC,SAAS,SACTC,OAAQ,UAGR,C","sources":["pages/cmd/CMDResult.tsx","service/util.ts"],"sourcesContent":["import { Box, Button, Grid, MenuItem, Select } from \"@mui/material\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport LogVirtualView from \"../../components/LogView/LogVirtualView\";\nimport TitleCard from \"../../components/TitleCard\";\nimport { getJmap, getJstack, getJstat } from \"../../service/util\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(4),\n    width: \"100%\",\n  },\n  table: {\n    marginTop: theme.spacing(4),\n    padding: theme.spacing(2),\n  },\n  pageMeta: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n  },\n  search: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst CMDResult = () => {\n  const classes = useStyles();\n  const { cmd, ip, pid } = useParams() as {\n    cmd: string;\n    ip: string;\n    pid: string;\n  };\n  const [result, setResult] = useState<string>();\n  const [option, setOption] = useState(\"gcutil\");\n  const executeJstat = useCallback(\n    () =>\n      getJstat(ip, pid, option)\n        .then((rsp) => {\n          if (rsp.data.result) {\n            setResult(rsp.data.data.output);\n          } else {\n            setResult(rsp.data.msg);\n          }\n        })\n        .catch((err) => setResult(err.toString())),\n    [ip, pid, option],\n  );\n\n  useEffect(() => {\n    switch (cmd) {\n      case \"jstack\":\n        getJstack(ip, pid)\n          .then((rsp) => {\n            if (rsp.data.result) {\n              setResult(rsp.data.data.output);\n            } else {\n              setResult(rsp.data.msg);\n            }\n          })\n          .catch((err) => setResult(err.toString()));\n        break;\n      case \"jmap\":\n        getJmap(ip, pid)\n          .then((rsp) => {\n            if (rsp.data.result) {\n              setResult(rsp.data.data.output);\n            } else {\n              setResult(rsp.data.msg);\n            }\n          })\n          .catch((err) => setResult(err.toString()));\n        break;\n      case \"jstat\":\n        executeJstat();\n        break;\n      default:\n        setResult(`Command ${cmd} is not supported.`);\n        break;\n    }\n  }, [cmd, executeJstat, ip, pid]);\n\n  return (\n    <div className={classes.root}>\n      <TitleCard title={cmd}>\n        {cmd === \"jstat\" && (\n          <Box className={classes.pageMeta}>\n            <Grid container spacing={1}>\n              <Grid item>\n                <Select\n                  value={option}\n                  onChange={(e) => setOption(e.target.value as string)}\n                >\n                  {[\n                    \"class\",\n                    \"compiler\",\n                    \"gc\",\n                    \"gccapacity\",\n                    \"gcmetacapacity\",\n                    \"gcnew\",\n                    \"gcnewcapacity\",\n                    \"gcold\",\n                    \"gcoldcapacity\",\n                    \"gcutil\",\n                    \"gccause\",\n                    \"printcompilation\",\n                  ].map((e) => (\n                    <MenuItem value={e}>{e}</MenuItem>\n                  ))}\n                </Select>\n              </Grid>\n              <Grid item>\n                <Button onClick={executeJstat}>Execute</Button>\n              </Grid>\n            </Grid>\n          </Box>\n        )}\n      </TitleCard>\n      <TitleCard title={`IP: ${ip} / Pid: ${pid}`}>\n        <LogVirtualView\n          content={result || \"loading\"}\n          language=\"prolog\"\n          height={800}\n        />\n      </TitleCard>\n    </div>\n  );\n};\n\nexport default CMDResult;\n","import axios from \"axios\";\n\ntype CMDRsp = {\n  result: boolean;\n  msg: string;\n  data: {\n    output: string;\n  };\n};\n\nexport const getJstack = (ip: string, pid: string) => {\n  return axios.get<CMDRsp>(\"utils/jstack\", {\n    params: {\n      ip,\n      pid,\n    },\n  });\n};\n\nexport const getJmap = (ip: string, pid: string) => {\n  return axios.get<CMDRsp>(\"utils/jmap\", {\n    params: {\n      ip,\n      pid,\n    },\n  });\n};\n\nexport const getJstat = (ip: string, pid: string, options: string) => {\n  return axios.get<CMDRsp>(\"utils/jstat\", {\n    params: {\n      ip,\n      pid,\n      options,\n    },\n  });\n};\n\ntype NamespacesRsp = {\n  result: boolean;\n  msg: string;\n  data: {\n    namespaces: {\n      namespaceId: string;\n      hostNameList: string[];\n    }[];\n  };\n};\n\nexport const getNamespaces = () => {\n  return axios.get<NamespacesRsp>(\"namespaces\");\n};\n"],"names":["useStyles","makeStyles","theme","root","padding","spacing","width","table","marginTop","pageMeta","search","margin","classes","cmd","ip","pid","useParams","result","setResult","useState","option","setOption","executeJstat","useCallback","options","axios","params","getJstat","then","rsp","data","output","msg","catch","err","toString","useEffect","getJstack","getJmap","className","TitleCard","title","Box","Grid","container","item","Select","value","onChange","e","target","map","MenuItem","Button","onClick","LogVirtualView","content","language","height"],"sourceRoot":""}